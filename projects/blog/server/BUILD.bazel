load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
)
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_layer")
load("@io_bazel_rules_k8s//k8s:object.bzl", "k8s_object")
load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")
load("//projects/blog:variables.bzl", "CLUSTER_NAME")

article_files = [
    "articles/article-preview-list.json",
] + glob(["articles/*.md"])

haskell_binary(
    name = "server",
    ghcopts = [
        "-Werror",
        "-Wall",
        "-Wcompat",
        "-Wincomplete-record-updates",
        "-Wincomplete-patterns",
        "-Wredundant-constraints",
        "-Wnoncanonical-monad-instances",
        "-XDeriveGeneric",
        "-XOverloadedStrings",
        "-XNamedFieldPuns"
    ],
    srcs = [
        "src/About.hs",
        "src/Article.hs",
        "src/ArticlePreview.hs",
        "src/Consts.hs",
        "src/Contacts.hs",
        "src/CustomAttributes.hs",
        "src/Home.hs",
        "src/Main.hs",
    ],
    data = article_files,
    deps = [
        "@stackage//:aeson",
        "@stackage//:base",
        "@stackage//:blaze-html",
        "@stackage//:blaze-markup",
        "@stackage//:bytestring",
        "@stackage//:cmark",
        "@stackage//:http-types",
        "@stackage//:scotty",
        "@stackage//:streaming-commons",
        "@stackage//:text",
        "@stackage//:time",
        "@stackage//:unordered-containers",
        "@stackage//:wai-middleware-static",
        "@stackage//:warp",
    ],
)

container_layer(
    name = "articles_layer",
    directory = "/app/projects/blog/server/articles",
    files = article_files,
    mode = "0o777",
)

container_layer(
    name = "binary_layer",
    directory = "app",
    files = [":server"],
    mode = "0o777",
)

container_image(
    name = "server_image",
    base = "@haskell_base//image",
    entrypoint = ["./server"],
    env = {
        "PORT": "3000",
        "HOST": "*",
    },
    layers = [
        ":binary_layer",
        ":articles_layer",
    ],
    ports = ["3000"],
    workdir = "/app",
)

k8s_object(
    name = "deployment",
    cluster = CLUSTER_NAME,
    images = {
        "docker.io/mksmtn/f_x_blog_server:latest": ":server_image",
    },
    kind = "deployment",
    kubeconfig = "//secrets:config.yaml",
    template = "k8s/deployment.yaml",
)

k8s_object(
    name = "service",
    cluster = CLUSTER_NAME,
    kind = "service",
    kubeconfig = "//secrets:config.yaml",
    template = "k8s/service.yaml",
)

k8s_objects(
    name = "k8s",
    objects = [
        ":deployment",
        ":service",
    ],
    visibility = ["//projects/blog:__pkg__"],
)
